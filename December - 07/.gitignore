# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# C extensions
*.so

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
pip-wheel-metadata/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

#code
class Solution(object):
   def exist(self, board, word):
      n =len(board)
      m = len(board[0])
      for i in range(n):
         for j in range(m):
            if word[0] == board[i][j]:
               if self.find(board,word,i,j):
                  return True
      return False
   def find(self, board,word,row,col,i=0):
      if i== len(word):
         return True
      if row>= len(board) or row <0 or col >=len(board[0]) or col<0 or word[i]!=board[row][col]:
         return False
      board[row][col] = '*'
      res = self.find(board,word,row+1,col,i+1) or self.find(board,word,row-1,col,i+1) or self.find(board,word,row,col+1,i+1) or self.find(board,word,row,col-1,i+1)
      board[row][col] = word[i]
      return res
ob1 = Solution()
word1=input("enter the word")
print(ob1.exist([
        ['A','S','S','E','R','T','I','V','E','N','E','S','S','L','J'],
        ['C','P','O','G','O','O','D','P','O','S','I','T','I','V','E'],
        ['O','P','E','N','B','M','U','R','E','W','O','P','R','P','S'],
        ['M','E','D','I','A','T','I','O','N','E','L','D','I','O','G'],
        ['M','A','A','S','R','E','G','J','E','W','I','N','W','I','N'],
        ['U','C','I','A','E','M','O','E','E','C','S','K','E','N','I'],
        ['N','E','M','R','S','H','A','C','D','V','T','W','T','T','L'],
        ['I','T','E','H','O','T','L','T','S','T','E','R','A','O','E'],
        ['C','A','S','P','L','G','L','S','I','U','N','E','R','F','E'],
        ['A','I','S','A','U','S','Y','T','O','I','S','E','V','F','S'],
        ['T','T','A','R','T','D','O','C','E','N','P','P','I','H','D'],
        ['I','O','G','A','I','G','U','P','Y','M','G','O','O','E','E'],
        ['O','G','E','P','O','A','F','P','Q','I','E','N','O','W','A'],
        ['N','E','C','O','N','F','L','I','C','T','S','D','C','E','R'],
        ['F','N','H','T','C','A','T','N','O','C','E','Y','E','B','T']],word1))
#code
# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/

# Translations
*.mo
*.pot

# Django stuff:
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
.python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
#Pipfile.lock

# PEP 582; used by e.g. github.com/David-OConnor/pyflow
__pypackages__/

# Celery stuff
celerybeat-schedule
celerybeat.pid

# SageMath parsed files
*.sage.py

# Environments
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/
